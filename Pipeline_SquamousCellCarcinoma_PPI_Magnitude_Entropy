library("readxl")
###########################################################################################################################
# Reload colData from file
# Reload unstranded_data from file
###########################################################################################################################
unstranded_data_file                <- "/home/felipe/Documentos/LungPortal/samples/unstranded_data_id.tsv"                #
merged_data_patient_info_file       <- "/home/felipe/Documentos/LungPortal/samples/patient.metadata.tsv"                  #
colData_file                        <- "/home/felipe/Documentos/LungPortal/samples/colData.tsv"                           #
avg_expression_pos_file             <- "/home/felipe/Documentos/LungPortal/samples/avg_expression_pos.tsv"                #
ListGenesInteratoma_file            <- "/home/felipe/Documentos/LungPortal/ListGenesInteratoma.tsv"                       #
###########################################################################################################################
unstranded_data                    <-read.table(file = unstranded_data_file, sep = '\t', header = TRUE,fill=TRUE)         #
merged_data_patient_info_data      <-read.table(file = merged_data_patient_info_file, sep = '\t', header = TRUE,fill=TRUE)#
colData_data                       <-read.table(file = colData_file, sep = '\t', header = TRUE,fill=TRUE)                 #
avg_expression_pos                 <-read.table(file = avg_expression_pos_file, sep = '\t', header = TRUE,fill=TRUE)      #
table_ppi                          <-read.table(file = ListGenesInteratoma_file, sep = '\t', header = TRUE,fill=TRUE)     #
rownames(colData)                  <-colData$patient_id                                                                   #
###########################################################################################################################
# Filter to only positive tumor/normal samples.
unstranded_data<-unstranded_data[avg_expression_pos$Gene,]

#omit NA values from vector
unstranded_data <- na.omit(unstranded_data)
###########################################################################################################################
library("org.Hs.eg.db")
symbols <- mapIds(org.Hs.eg.db, keys = "ENSG00000130720", keytype = "ENSEMBL", column="SYMBOL")


table_ppi$order_of_magnitude_Stages_1_and_2<-0
table_ppi$order_of_magnitude_Stages_2_and_3<-0
table_ppi$order_of_magnitude_Stages_1_and_3<-0

# Stotre indexes of cols
# order_of_magnitude_Stages_1_and_2=6
# order_of_magnitude_Stages_2_and_3=7
# order_of_magnitude_Stages_1_and_3=8
store_col_name_index<-c(6,7,8)

# col_Index 
col_Index=6




########################################################################################################################
# A panel to analyse differential Category comparing samples of each stage against all others stages.
########################################################################################################################
# Set colData
df_stage_pairs<-data.frame(stage_i=c("Stage I","Stage II","Stage I"),stage_ii=c("Stage II","Stage III","Stage III"))

# for each pair of stage.
for (stage_pair_index in rownames(df_stage_pairs))
{	
    # Obtain normalized coutns
    norm_counts<-counts(dds_stages_tissue_type, normalized = TRUE)

    # Create bck for colData_bck
    colData_bck<-colData

    # Store the stages 
    stage_i<-df_stage_pairs[stage_pair_index,"stage_i"]
    stage_ii<-df_stage_pairs[stage_pair_index,"stage_ii"]

    # Selecte samples from stage_i and stage_ii
    samples_stage_i<-rownames(colData_bck[which(colData_bck$stages==stage_i),])
    samples_stage_ii<-rownames(colData_bck[which(colData_bck$stages==stage_ii),])

    # Run DESeq2
    unstranded_data[selected_genes,samples_stage_i]
    unstranded_data[selected_genes,samples_stage_ii]

    # Selecte samples from stage_i and stage_ii
    samples_stage_i_ii<-c(rownames(colData_bck[which(colData_bck$stages==stage_i),]),rownames(colData_bck[which(colData_bck$stages==stage_ii),]))

    # DESeqDataSetFromMatrix
    dds_stages <- DESeqDataSetFromMatrix(countData = unstranded_data[,samples_stage_i_ii], colData=colData_data[samples_stage_i_ii,], design = ~  age_at_index +  gender +tissue_type  )
  
    # Estimate size factor
    dds_stages_tissue_type <- estimateSizeFactors(dds_stages_tissue_type)

    # Obtain normalized coutns
    norm_counts<-counts(dds_stages_tissue_type, normalized = TRUE)

    names(rowMeans(norm_counts[,samples_stage_ii])/rowMeans(norm_counts[,samples_stage_i]))

    table_ppi[,]
}
  
  
  # Run DESeq2
  dds_stages <- DESeq(dds_stages)
  
  print(resultsNames(dds_stages)[4])		
  
  # Df s6tages I
  df_stages<-data.frame(results(dds_stages,name=resultsNames(dds_stages)[4]))
  ####################################################################################################################
  
}


