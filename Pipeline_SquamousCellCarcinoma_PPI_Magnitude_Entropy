##########################################################################################################################################################
# A scrtpt to calculate                                                                                                                                  #
# 1) boxplots for DE genes from each stage (e.g. Stage I vs. Steges II and III) using smples of each Stage (e.g. Samples from Stage I),                  #
# and also from the genes in the intersection of the stages                                                                                              #
# 2) order of magnitudes among any two stages norm_counts(stage_ii)/norm_counts(stage_i)                                                                 #
# 3) correlation among order of magniture and number of connections from interactome                                                                     #
# obs: one positive genes selected from both DE normal/tumor and DE stages are used                                                                      #
#                                                                                                                                                        #
##########################################################################################################################################################
# Path to files of selected_genes                                                                                                     # 
selected_genes_Stage_I_file       <-"/home/felipe/Documentos/LungPortal/output/uniq_selected_genes_Stage_pos_stage_I.tsv"             #
selected_genes_Stage_II_file      <-"/home/felipe/Documentos/LungPortal/output/uniq_selected_genes_Stage_pos_stage_II.tsv"            #
selected_genes_Stage_III_file     <-"/home/felipe/Documentos/LungPortal/output/uniq_selected_genes_Stage_pos_stage_III.tsv"           #
unstranded_file                   <-"/home/felipe/Documentos/LungPortal/samples/unstranded_data_id.tsv"                               #
#######################################################################################################################################
# Load data                                                                                                                           #
selected_genes_Stage_I_data       <-read.table(file = selected_genes_Stage_I_file, sep = '\t', header = TRUE,fill=TRUE)               #
selected_genes_Stage_II_data      <-read.table(file = selected_genes_Stage_II_file, sep = '\t', header = TRUE,fill=TRUE)              #
selected_genes_Stage_III_data     <-read.table(file = selected_genes_Stage_III_file, sep = '\t', header = TRUE,fill=TRUE)             #
unstranded_data                   <-read.table(file = unstranded_file, sep = '\t', header = TRUE,fill=TRUE)                           #
#######################################################################################################################################
# Filter to only positive tumor/normal samples.
unstranded_data<-unstranded_data[avg_expression_pos$Gene,]

#omit NA values from vector
unstranded_data <- na.omit(unstranded_data)

#omit NA values from vector
colData_data<-colData_data[colnames(unstranded_data),]

# dds_stages
dds_stages <- DESeqDataSetFromMatrix(countData = unstranded_data, colData=colData, design = ~  age_at_index +  gender +tissue_type  )

# Estimate size factor
dds_stages <- estimateSizeFactors(dds_stages)

# Obtain normalized coutns
norm_counts<-counts(dds_stages, normalized = TRUE)
#######################################################################################################################################
# Genes of each stage
sample_stage_I  <-colData[colData$stages=="Stage I","patient_id"]
sample_stage_II <-colData[colData$stages=="Stage II","patient_id"]
sample_stage_III<-colData[colData$stages=="Stage III","patient_id"]
#######################################################################################################################################
# Samples of each
sample_stage_I  <-rownames(colData[colData$stage=="Stage I",])
sample_stage_II <-rownames(colData[colData$stage=="Stage II",])
sample_stage_III<-rownames(colData[colData$stage=="Stage III",])
#######################################################################################################################################
# Lists for stage names,samples, and genes.
vector_stages   <- c("stageI","stageII","stageIII")
list_samples    <- list(stageI=sample_stage_I,stageII=sample_stage_II,stageIII=sample_stage_III)
list_genes      <- list(stageI=selected_genes_Stage_I_data$Gene,stageII=selected_genes_Stage_II_data$Gene,stageIII=selected_genes_Stage_III_data$Gene)
#######################################################################################################################################
# A table with DE genes stage
melt_combined_table<-rbind(rbind(data.frame(DE_genes_stage="DE genes from stage I",samples="Samples from stage I", 
Expr=melt(norm_counts[selected_genes_Stage_I_data$Gene,sample_stage_I])),
data.frame(DE_genes_stage="DE genes from stage I",samples="Samples from stage II", Expr=melt(norm_counts[selected_genes_Stage_I_data$Gene,sample_stage_II])),
data.frame(DE_genes_stage="DE genes from stage I",samples="Samples from stage III", Expr=melt(norm_counts[selected_genes_Stage_I_data$Gene,sample_stage_III]))),
rbind(data.frame(DE_genes_stage="DE genes from stage II",samples="Samples from stage I", Expr=melt(norm_counts[selected_genes_Stage_II_data$Gene,sample_stage_I])),
data.frame(DE_genes_stage="DE genes from stage II",samples="Samples from stage II", Expr=melt(norm_counts[selected_genes_Stage_II_data$Gene,sample_stage_II])),
data.frame(DE_genes_stage="DE genes from stage II",samples="Samples from stage III", Expr=melt(norm_counts[selected_genes_Stage_II_data$Gene,sample_stage_III]))),
rbind(data.frame(DE_genes_stage="DE genes from stage III",samples="Samples from stage I", Expr=melt(norm_counts[selected_genes_Stage_III_data$Gene,sample_stage_I])),
data.frame(DE_genes_stage="DE genes from stage III",samples="Samples from stage II", Expr=melt(norm_counts[selected_genes_Stage_III_data$Gene,sample_stage_II])),
data.frame(DE_genes_stage="DE genes from stage III",samples="Samples from stage III", Expr=melt(norm_counts[selected_genes_Stage_III_data$Gene,sample_stage_III]))))

# Add combined table intersection 
melt_combined_table$log2Expr<-log(melt_combined_table$Expr.value)

# plot
p1 <- ggplot(melt_combined_table, aes(x=DE_genes_stage, y=log2Expr, fill=samples)) +
    geom_boxplot(varwidth = TRUE) + facet_grid(~samples) +
    theme(legend.position="none") + geom_boxplot() + scale_fill_brewer(palette="Set1") + theme_bw() + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) + ggtitle("Expression of genes per stage") 

# FindClusters_resolution
png(filename=paste(output_dir,"Expression_of_genes_per_stage.png",sep=""), width = 18, height = 18, res=600, units = "cm")
  p1
dev.off()

#######################################################################################################################################
intersection_genes_pos_Stages_I_II_III_file <- "/home/felipe/Documentos/LungPortal/output/intersection_genes_pos_Stages_I_II_III.tsv" #
intersection_genes_pos_Stages_I_II_file     <- "/home/felipe/Documentos/LungPortal/output/intersection_genes_pos_Stages_I_II.tsv"     #
intersection_genes_pos_Stages_I_III_file    <- "/home/felipe/Documentos/LungPortal/output/intersection_genes_pos_Stages_I_III.tsv"    #
intersection_genes_pos_Stages_II_III_file    <- "/home/felipe/Documentos/LungPortal/output/intersection_genes_pos_Stages_II_III.tsv"  #
######################################################################################################################################################
# Load data                                                                                                                                          #
intersection_genes_pos_Stages_I_II_III       <-read.table(file = intersection_genes_pos_Stages_I_II_III_file, sep = '\t', header = TRUE,fill=TRUE)   #
intersection_genes_pos_Stages_I_II           <-read.table(file = intersection_genes_pos_Stages_I_II_file, sep = '\t', header = TRUE,fill=TRUE)       #
intersection_genes_pos_Stages_II_III         <-read.table(file = intersection_genes_pos_Stages_II_III_file, sep = '\t', header = TRUE,fill=TRUE)     #
intersection_genes_pos_Stages_I_III          <-read.table(file = intersection_genes_pos_Stages_I_III_file, sep = '\t', header = TRUE,fill=TRUE)      #
######################################################################################################################################################
melt_combined_table_intersection<-rbind(data.frame(DE_genes_stage="Intersection stages I, II, III",samples="Samples from stage I", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_I])),
data.frame(DE_genes_stage="Intersection stages I, II",samples="Samples from stage I", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_I])),
data.frame(DE_genes_stage="Intersection stages I, III",samples="Samples from stage I", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_I])),
data.frame(DE_genes_stage="Intersection stages II, III",samples="Samples from stage I", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_I])),
data.frame(DE_genes_stage="Intersection stages I, II, III",samples="Samples from stage II", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_II])),
data.frame(DE_genes_stage="Intersection stages I, II",samples="Samples from stage II", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_II])),
data.frame(DE_genes_stage="Intersection stages I, III",samples="Samples from stage II", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_II])),
data.frame(DE_genes_stage="Intersection stages II, III",samples="Samples from stage II", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_II])),
data.frame(DE_genes_stage="Intersection stages I, II, III",samples="Samples from stage III", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_III])),
data.frame(DE_genes_stage="Intersection stages I, II",samples="Samples from stage III", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_III])),
data.frame(DE_genes_stage="Intersection stages I, III",samples="Samples from stage III", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_III])),
data.frame(DE_genes_stage="Intersection stages II, III",samples="Samples from stage III", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_III])))

# Add combined table intersection 
melt_combined_table_intersection$log2Expr<-log(melt_combined_table_intersection$Expr.value)

# plot
p2 <- ggplot(melt_combined_table_intersection, aes(x=DE_genes_stage, y=log2Expr, fill=samples)) +
    geom_boxplot(varwidth = TRUE) + facet_grid(~samples) +
    theme(legend.position="none") + geom_boxplot() + scale_fill_brewer(palette="Set1") + theme_bw() + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) + ggtitle("Expression of genes per stage") 
######################################################################################################################################################
# FindClusters_resolution
png(filename=paste(output_dir,"Expression_of_genes_per_intersaction.png",sep=""), width = 18, height = 18, res=600, units = "cm")
  p2
dev.off()
######################################################################################################################################################
# Paired stages
stages_pairs=data.frame(stage_i=c("stageI","stageI","stageII"),stage_ii=c("stageII","stageIII","stageIII"))

# Data frame results
df_order_of_magnitude<-data.frame(Genes=c(),stage_pair=c(),order_of_magnitude=c())

# For each stage pair
for (stage_pair in rownames(stages_pairs))
{
    # Store pairs
    stage_i <- stages_pairs[stage_pair,"stage_i"]
    stage_ii<- stages_pairs[stage_pair,"stage_ii"]

    # Store pairs
    genes_stage_i  <- list_genes[[stage_i]]
    genes_stage_ii <- list_genes[[stage_ii]]

    # Take the samples and genes of stages 
    samples_stage_i  <-list_samples[[stage_i]]    
    samples_stage_ii <-list_samples[[stage_ii]]    

    # Paste Star pairs
    df_order_of_magnitude<-rbind(df_order_of_magnitude,data.frame(Genes=names(rowMeans(norm_counts[,samples_stage_ii])/rowMeans(norm_counts[,samples_stage_i])),stage_pair=paste(stage_ii,stage_i,sep="_over_"),order_of_magnitude=rowMeans(norm_counts[,samples_stage_ii])/rowMeans(norm_counts[,samples_stage_i])))
}
######################################################################################################################################################
# plot
p2 <- ggplot(df_order_of_magnitude, aes(x=stage_pair, y=log(order_of_magnitude))) +
    geom_boxplot(varwidth = TRUE) +
    theme(legend.position="none") + geom_boxplot() + scale_fill_brewer(palette="Set1") + theme_bw() + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) + ggtitle("Order of magnitude per gene") 

df_order_of_magnitude$log2_order_of_magnitude<-log(df_order_of_magnitude$order_of_magnitude)

# Pairwise comparisons: Specify the comparisons you want
my_comparisons <- list( c("stageII_over_stageI", "stageIII_over_stageI"), c("stageIII_over_stageII", "stageIII_over_stageI"), c("stageIII_over_stageII", "stageII_over_stageI") )

# FindClusters_resolution
png(filename=paste(output_dir,"Order_of_magnitude.png",sep=""), width = 16, height = 16, res=600, units = "cm")
  ggpaired(df_order_of_magnitude, x = "stage_pair", y = "log2_order_of_magnitude", line.color = "gray", line.size = 0.4, palette = "jco")+ stat_compare_means(paired = TRUE) + scale_fill_brewer(palette="Set1") + theme_bw() + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) + ggtitle("Order of magnitude per gene") + stat_compare_means(comparisons = my_comparisons) 
dev.off()

#####################################################################################################################
library("readxl")
Table1_data<-read.table(file = "/home/felipe/Documentos/LungPortal/Table_2.tsv", sep = '\t', header = TRUE,fill=TRUE)     

# Create field Table1_data$EMSEMBL
Table1_data$EMSEMBL<-""

# Selected gene_ids
selected_gene_id<-c()

# For each gene_id, take the rtownames that it is on the table1_data
for (gene_id in Table1_data$ENSG)
{ 
    # Store gene_index
    gene_index<-which(grepl(gene_id, rownames(unstranded_data)))

    if(!identical(gene_index, integer(0)))
    {
        # Store reslts    
        Table1_data[which(Table1_data$ENSG == gene_id),"EMSEMBL"]<-rownames(unstranded_data)[gene_index[1]]
    }
}
# Filter up image
Table1_data<-Table1_data[Table1_data$EMSEMBL!="",]

#####################################################################################################################
# df_order_of_magnitude
df_order_of_magnitude<-df_order_of_magnitude[df_order_of_magnitude$Gene %in% Table1_data$EMSEMBL,]
Table1_data<-Table1_data[Table1_data$EMSEMBL %in% df_order_of_magnitude$Gene,]

#for each rown, add the number of connections
df_order_of_magnitude$PPI<-0

# for each row
for (gene in rownames(df_order_of_magnitude))
{    
    df_order_of_magnitude[gene,"PPI"]<-Table1_data[Table1_data$EMSEMBL==gene,"PPI"][1]
}

# PPI
df_order_of_magnitude[!is.na(df_order_of_magnitude$PPI),]
df_order_of_magnitude<-na.omit(df_order_of_magnitude)

# FindClusters_resolution
png(filename=paste(output_dir,"PPI_Order_Magnitude.png",sep=""), width = 14, height = 14, res=600, units = "cm")
  ggplot(df_order_of_magnitude, aes(x = PPI, y = log(order_of_magnitude))) +  geom_point() + theme_bw() + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) + ggtitle("PPI vs. Order of magnitude")
dev.off()
