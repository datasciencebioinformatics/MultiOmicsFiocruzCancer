#######################################################################################################################################
# To DO:
# Here 1 : try extremes of padj threshold range (0.001 - 0.05)
# Here 2 : try extremes of topNodes 10-100
# Here 3 : check if KS classiKS can be used as score instead of fisher qvalue
# Here 4 : change threshold parameter
# Important is to improve legibility of plot
#######################################################################################################################################
# Path to files of selected_genes                                                                                                     # 
selected_genes_Stage_I_file       <-"/home/felipe/Documentos/LungPortal/output/uniq_selected_genes_Stage_pos_stage_I.tsv"             #
selected_genes_Stage_II_file      <-"/home/felipe/Documentos/LungPortal/output/uniq_selected_genes_Stage_pos_stage_II.tsv"            #
selected_genes_Stage_III_file     <-"/home/felipe/Documentos/LungPortal/output/uniq_selected_genes_Stage_pos_stage_III.tsv"           #
unstranded_file                   <-"/home/felipe/Documentos/LungPortal/samples/unstranded_data_id.tsv"                               #
#######################################################################################################################################
# Load data                                                                                                                           #
selected_genes_Stage_I_data       <-read.table(file = selected_genes_Stage_I_file, sep = '\t', header = TRUE,fill=TRUE)               #
selected_genes_Stage_II_data      <-read.table(file = selected_genes_Stage_II_file, sep = '\t', header = TRUE,fill=TRUE)              #
selected_genes_Stage_III_data     <-read.table(file = selected_genes_Stage_III_file, sep = '\t', header = TRUE,fill=TRUE)             #
unstranded_data                   <-read.table(file = unstranded_file, sep = '\t', header = TRUE,fill=TRUE)                           #
#######################################################################################################################################
# Filter to only positive tumor/normal samples.
unstranded_data<-unstranded_data[avg_expression_pos$Gene,]

#omit NA values from vector
unstranded_data <- na.omit(unstranded_data)

#omit NA values from vector
colData_data<-colData_data[colnames(unstranded_data),]

# dds_stages
dds_stages <- DESeqDataSetFromMatrix(countData = unstranded_data, colData=colData, design = ~  age_at_index +  gender +tissue_type  )

# Estimate size factor
dds_stages <- estimateSizeFactors(dds_stages)

# Obtain normalized coutns
norm_counts<-counts(dds_stages, normalized = TRUE)
#######################################################################################################################################
# Path to files of selected_genes                                                                                                     # 
selected_genes_Stage_I_file       <-"/home/felipe/Documentos/LungPortal/output/uniq_selected_genes_Stage_pos_stage_I.tsv"             #
selected_genes_Stage_II_file      <-"/home/felipe/Documentos/LungPortal/output/uniq_selected_genes_Stage_pos_stage_II.tsv"            #
selected_genes_Stage_III_file     <-"/home/felipe/Documentos/LungPortal/output/uniq_selected_genes_Stage_pos_stage_III.tsv"           #
unstranded_file                   <-"/home/felipe/Documentos/LungPortal/samples/unstranded_data_id.tsv"                               #
#######################################################################################################################################
# Load data                                                                                                                           #
selected_genes_Stage_I_data       <-read.table(file = selected_genes_Stage_I_file, sep = '\t', header = TRUE,fill=TRUE)               #
selected_genes_Stage_II_data      <-read.table(file = selected_genes_Stage_II_file, sep = '\t', header = TRUE,fill=TRUE)              #
selected_genes_Stage_III_data     <-read.table(file = selected_genes_Stage_III_file, sep = '\t', header = TRUE,fill=TRUE)             #
unstranded_data                   <-read.table(file = unstranded_file, sep = '\t', header = TRUE,fill=TRUE)                           #
#######################################################################################################################################
# Genes of each stage
sample_stage_I  <-colData[colData$stages=="Stage I","patient_id"]
sample_stage_II <-colData[colData$stages=="Stage II","patient_id"]
sample_stage_III<-colData[colData$stages=="Stage III","patient_id"]
#######################################################################################################################################
# Samples of each
sample_stage_I  <-rownames(colData[colData$stage=="Stage I",])
sample_stage_II <-rownames(colData[colData$stage=="Stage II",])
sample_stage_III<-rownames(colData[colData$stage=="Stage III",])
#######################################################################################################################################
vector_stages   <- c("stageI","stageII","stageIII")
list_samples    <- list(stageI=sample_stage_I,stageII=sample_stage_II,stageIII=sample_stage_III)
list_genes      <- list(stageI=selected_genes_Stage_I_data$Gene,stageII=selected_genes_Stage_II_data$Gene,stageIII=selected_genes_Stage_III_data$Gene)
#######################################################################################################################################
melt_combined_table<-rbind(rbind(data.frame(DE_genes_stage="DE genes from stage I",samples="Samples from stage I", 
Expr=melt(norm_counts[selected_genes_Stage_I_data$Gene,sample_stage_I])),
data.frame(DE_genes_stage="DE genes from stage I",samples="Samples from stage II", Expr=melt(norm_counts[selected_genes_Stage_I_data$Gene,sample_stage_II])),
data.frame(DE_genes_stage="DE genes from stage I",samples="Samples from stage III", Expr=melt(norm_counts[selected_genes_Stage_I_data$Gene,sample_stage_III]))),
rbind(data.frame(DE_genes_stage="DE genes from stage II",samples="Samples from stage I", Expr=melt(norm_counts[selected_genes_Stage_II_data$Gene,sample_stage_I])),
data.frame(DE_genes_stage="DE genes from stage II",samples="Samples from stage II", Expr=melt(norm_counts[selected_genes_Stage_II_data$Gene,sample_stage_II])),
data.frame(DE_genes_stage="DE genes from stage II",samples="Samples from stage III", Expr=melt(norm_counts[selected_genes_Stage_II_data$Gene,sample_stage_III]))),
rbind(data.frame(DE_genes_stage="DE genes from stage III",samples="Samples from stage I", Expr=melt(norm_counts[selected_genes_Stage_III_data$Gene,sample_stage_I])),
data.frame(DE_genes_stage="DE genes from stage III",samples="Samples from stage II", Expr=melt(norm_counts[selected_genes_Stage_III_data$Gene,sample_stage_II])),
data.frame(DE_genes_stage="DE genes from stage III",samples="Samples from stage III", Expr=melt(norm_counts[selected_genes_Stage_III_data$Gene,sample_stage_III]))))

# Add combined table intersection 
melt_combined_table$log2Expr<-log(melt_combined_table$Expr.value)

# plot
p1 <- ggplot(melt_combined_table, aes(x=DE_genes_stage, y=log2Expr, fill=samples)) +
    geom_boxplot(varwidth = TRUE) + facet_grid(~samples) +
    theme(legend.position="none") + geom_boxplot() + scale_fill_brewer(palette="Set1") + theme_bw() + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) + ggtitle("Expression of genes per stage") 

# FindClusters_resolution
png(filename=paste(output_dir,"Expression_of_genes_per_stage.png",sep=""), width = 18, height = 18, res=600, units = "cm")
  p1
dev.off()

#######################################################################################################################################
intersection_genes_pos_Stages_I_II_III_file <- "/home/felipe/Documentos/LungPortal/output/intersection_genes_pos_Stages_I_II_III.tsv" #
intersection_genes_pos_Stages_I_II_file     <- "/home/felipe/Documentos/LungPortal/output/intersection_genes_pos_Stages_I_II.tsv"     #
intersection_genes_pos_Stages_I_III_file    <- "/home/felipe/Documentos/LungPortal/output/intersection_genes_pos_Stages_I_III.tsv"    #
intersection_genes_pos_Stages_II_III_file    <- "/home/felipe/Documentos/LungPortal/output/intersection_genes_pos_Stages_II_III.tsv"  #
######################################################################################################################################################
# Load data                                                                                                                                          #
intersection_genes_pos_Stages_I_II_III       <-read.table(file = intersection_genes_pos_Stages_I_II_III_file, sep = '\t', header = TRUE,fill=TRUE)   #
intersection_genes_pos_Stages_I_II           <-read.table(file = intersection_genes_pos_Stages_I_II_file, sep = '\t', header = TRUE,fill=TRUE)       #
intersection_genes_pos_Stages_II_III         <-read.table(file = intersection_genes_pos_Stages_II_III_file, sep = '\t', header = TRUE,fill=TRUE)     #
intersection_genes_pos_Stages_I_III          <-read.table(file = intersection_genes_pos_Stages_I_III_file, sep = '\t', header = TRUE,fill=TRUE)      #
######################################################################################################################################################
melt_combined_table_intersection<-rbind(data.frame(DE_genes_stage="Intersection stages I, II, III",samples="Samples from stage I", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_I])),
data.frame(DE_genes_stage="Intersection stages I, II",samples="Samples from stage I", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_I])),
data.frame(DE_genes_stage="Intersection stages I, III",samples="Samples from stage I", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_I])),
data.frame(DE_genes_stage="Intersection stages II, III",samples="Samples from stage I", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_I])),
data.frame(DE_genes_stage="Intersection stages I, II, III",samples="Samples from stage II", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_II])),
data.frame(DE_genes_stage="Intersection stages I, II",samples="Samples from stage II", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_II])),
data.frame(DE_genes_stage="Intersection stages I, III",samples="Samples from stage II", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_II])),
data.frame(DE_genes_stage="Intersection stages II, III",samples="Samples from stage II", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_II])),
data.frame(DE_genes_stage="Intersection stages I, II, III",samples="Samples from stage III", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_III])),
data.frame(DE_genes_stage="Intersection stages I, II",samples="Samples from stage III", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_III])),
data.frame(DE_genes_stage="Intersection stages I, III",samples="Samples from stage III", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_III])),
data.frame(DE_genes_stage="Intersection stages II, III",samples="Samples from stage III", Expr=melt(norm_counts[intersection_genes_pos_Stages_I_II_III$Gene,sample_stage_III])))

# Add combined table intersection 
melt_combined_table_intersection$log2Expr<-log(melt_combined_table_intersection$Expr.value)

# plot
p2 <- ggplot(melt_combined_table_intersection, aes(x=DE_genes_stage, y=log2Expr, fill=samples)) +
    geom_boxplot(varwidth = TRUE) + facet_grid(~samples) +
    theme(legend.position="none") + geom_boxplot() + scale_fill_brewer(palette="Set1") + theme_bw() + theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) + ggtitle("Expression of genes per stage") 
######################################################################################################################################################
# FindClusters_resolution
png(filename=paste(output_dir,"Expression_of_genes_per_intersaction.png",sep=""), width = 18, height = 18, res=600, units = "cm")
  p2
dev.off()
######################################################################################################################################################
# For each stage, compute order of magnitude
for (stage in vector_stages)
{
    # Take the samples and genes of stages 
    samples <-list_samples[[stage]]    
    genes   <-list_genes[[stage]]


}


